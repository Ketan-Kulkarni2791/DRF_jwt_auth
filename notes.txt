-- Create an empty folder and open it in VS code.
-- Create virtual environment :
    > virtualenv authenv
-- Activate the virtaul env :
    > authenv\Scripts\activate
-- Install django :
    > pip install django
-- Create a new django project :
    > django-admin startproject drf_jwt_auth
-- Then get inside the project directory to create new app and add it (acount) to settings.py installed app :
    > cd drf_jwt_auth
    > python manage.py startapp account
-- Then install django rest framework and add it (rest_framework) to settings.py installed app.
    > pip install djangorestframework
-- Then install Simple JWT and add ''rest_framework_simplejwt'' to installed apps:
    > pip install djangorestframework-simplejwt
-- Then add following code block in settings.py file :
    >> REST_FRAMEWORK = {
            'DEFAULT_AUTHENTICATION_CLASSES': (
                'rest_framework_simplejwt.authentication.JWTAuthentication',
            )
        }
-- Then add following code block to settings.py :
    >> from datetime import timedelta
       SIMPLE_JWT = {
            "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
            "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
            "ROTATE_REFRESH_TOKENS": False,
            "BLACKLIST_AFTER_ROTATION": False,
            "UPDATE_LAST_LOGIN": False,

            "AUTH_HEADER_TYPES": ("Bearer",),
            "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
            "USER_ID_FIELD": "id",
            "USER_ID_CLAIM": "user_id",
            "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

            "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
            "TOKEN_TYPE_CLAIM": "token_type",
            "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

            "JTI_CLAIM": "jti",
        }
-- Then to avoid CORS error while connected with front-end, install following and add 'corsheaders' to installed apps :
    > pip install django-cors-headers
-- Then add 'corsheaders.middleware.CorsMiddleware' above 'CommonMiddleware'.
-- Then add allowed hosts for cors token in settings.py :
    >> CORS_ALLOWED_ORIGINS = [
            "http://localhost:8080",
            "http://127.0.0.1:3000",
        ]

-- Then let's create model.
   Reference doc link : https://docs.djangoproject.com/en/4.2/topics/auth/customizing/#a-full-example
   Import following :
    >> from django.contrib.auth.models import BaseUserManager, AbstractBaseUser

    Then create User model :
    >> class User(AbstractBaseUser):
            email = models.EmailField(
                verbose_name="Email",
                max_length=255,
                unique=True,
            )
            name = models.CharField(max_length=255)
            tc = models.BooleanField()
            is_active = models.BooleanField(default=True)
            is_admin = models.BooleanField(default=False)
            created_at = models.DateTimeField(auto_now_add=True)
            updated_at = models.DateTimeField(auto_now=True)

            objects = MyUserManager()

            USERNAME_FIELD = "email"
            REQUIRED_FIELDS = ["name", "tc"]

            def __str__(self):
                return self.email

            def has_perm(self, perm, obj=None):
                "Does the user have a specific permission?"
                # Simplest possible answer: Yes, always
                return self.is_admin

            def has_module_perms(self, app_label):
                "Does the user have permissions to view the app `app_label`?"
                # Simplest possible answer: Yes, always
                return True

            @property
            def is_staff(self):
                "Is the user a member of staff?"
                # Simplest possible answer: All admins are staff
                return self.is_admin

-- Then before custom user model, add custom user manager model as follows :
    >> # Custom User Manager Model
        class UserManager(BaseUserManager):
            def create_user(self, email, name, tc, password=None, password2=None):
                """
                Creates and saves a User with the given email, name, tc and password.
                """
                if not email:
                    raise ValueError("User must have an email address")

                user = self.model(
                    email=self.normalize_email(email),
                    name=name,
                    tc=tc
                )

                user.set_password(password)
                user.save(using=self._db)
                return user

            def create_superuser(self, email, name, tc, password=None):
                """
                Creates and saves a superuser with the given email, name, tc, and password.
                """
                user = self.create_user(
                    email,
                    password=password,
                    name=name,
                    tc=tc
                )
                user.is_admin = True
                user.save(using=self._db)
                return user

-- Then in order to see tables created in sqlite3 db, add extension 'sqlite3 viewer' to VS Code.
-- Then in settings.py, add following line in order to make our User model as default for creating superuser:
    >> AUTH_USER_MODEL = 'account.User'
-- Then makemigrations.
-- Then create superuser and then login and check :
    >> python manage.py createsuperuser

-- Then, to register this custom user model with Djangoâ€™s admin, the following code would be required in 
   the appâ€™s admin.py file:
   >>   from account.models import User
        from django.contrib.auth.admin import UserAdmin as BaseUserAdmin

        class UserModelAdmin(BaseUserAdmin):

            # The fields to be used in displaying the User model.
            # These override the definitions on the base UserModelAdmin
            # that reference specific fields on auth.User.
            list_display = ["id", "email", "name", "tc", "is_admin"]
            list_filter = ["is_admin"]
            fieldsets = [
                ("User Credentials", {"fields": ["email", "password"]}),
                ("Personal info", {"fields": ["name", "tc"]}),
                ("Permissions", {"fields": ["is_admin"]}),
            ]
            # add_fieldsets is not a standard ModelAdmin attribute. UserModelAdmin
            # overrides get_fieldsets to use this attribute when creating a user.
            add_fieldsets = [
                (
                    None,
                    {
                        "classes": ["wide"],
                        "fields": ["email", "name", "tc", "password1", "password2"],
                    },
                ),
            ]
            search_fields = ["email"]
            ordering = ["email", "id"]
            filter_horizontal = []

        # Now register the new UserModelAdmin...
        admin.site.register(User, UserModelAdmin)

-- Then create serializers.py and urls.py files in account app. And include the path in project's 
   urls.py file :
   >> path('api/user/', include('account.urls'))

-- Then let's go to view to create User Registration class. Import following stuff first :
    >>  from rest_framework.response import Response
        from rest_framework import status
        from rest_framework.views import APIView
    Then  create a basic post method using APIView and it to the urls.py file.
    >> class UserRegistrationView(APIView):
        def post(self, request, format=None):
            return Response(
                {
                    "Message": "Registration Successful !"
                }
            )
-- Add following code to account app's urls.py file and check in the browser if api/user/register/ works:
    >>  from .views import UserRegistrationView

        urlpatterns = [
            path('register/', UserRegistrationView.as_view(), name='register')
        ]
-- If you want to remove other stuff from browser and only want json response of the api to be shown,
   you can add following code in settings.py file's REST_FRAMEWORK section (Just FYI, no need to add.) :
   >> 'DEFAULT_RENDERER_CLASSES' : ('rest_framework.renderers.JSONRenderer',)

-- Then test this post api in postman.
-- Now let's create serializer.
-- If you are not getting proper intelliscence, go to command pallete by clicking ctrl+shift+p, select 
   Python interpreter, and select authenv one.
-- Add following code in serializer.py :
    >>  from rest_framework import serializers
        from .views import UserRegistrationView
        from .models import User


        class UserRegistrationSerializer(serializers.ModelSerializer):
            # This is because we need confirm password filed in our registration request
            password2 = serializers.CharField(style={'input_type': 'password'}, write_only=True)
            class Meta:
                model=User
                fields=['email', 'name', 'passowrd', 'password2', 'tc']
                extra_kwargs = {
                    'password': {'write_only': True}
                }

-- Now from postman, we will recieve data through 'request' parameter in the UserRegistrationView. And
   we will send that data to UserRegistrationSerializer for the serializing purpose.
   >> serializer = UserRegistrationSerializer(data=request.data)   # In views.py
-- Now let's validate this data into serializer :
    >>  # Validating password and confirm password while registration
        def validate(self, attrs):
            password = attrs.get('password')
            password2 = attrs.get('password2')
            if password != password2:
                raise serializers.ValidationError("Passwords does not match !")
            return attrs

-- Now since we have custom user model, we have to add create method for creating user in the serializer class.
    >> def create(self, validated_data):
        return User.objects.create_user(**validated_data)

-- Now let's call this validation mechanism in our views.py.
    >> if serializer.is_valid(raise_exception=True):
        user = serializer.save()
        return Response(
            {"Message": "Registration Successful !"},
            status=status.HTTP_201_CREATED
        )

-- Then let's go to postman to check the post api.
-- In Headers, add key = Accept and Value = application/json.
-- Then select Body --> Raw --> JSON.
-- Give the data into body and hit send.
    >> {
            "email": "indu@example.com",
            "name": "Indu Singh",
            "password": "indu@123#",
            "password2": "indu@123#",
            "tc": "True"
        }
-- Check if the data is saved in db table.
-- Here Registration part is completed.

***************************** Login View and Stuff ******************************************

-- Go to views.py and create a basic UserLoginView.
    >> class UserLoginView(APIView):
        def post(self, request, format=None):
            return Response(
                    {"Message": "Login Successful !"},
                    status=status.HTTP_200_OK
                )
-- Then go to serializers.py and create a serializer for UserLoginView.
    >> class UserLoginSerializer(serializers.ModelSerializer):
        email = serializers.EmailField(max_length=255)
        class Meta:
            model=User
            fields=['email', 'password']
-- Now we have to authenticate the user. We will take our serialized data into view and then
   do the authentication stuff into views.py.
   >> class UserLoginView(APIView):
        def post(self, request, format=None):
            serializer = UserLoginSerializer(data=request.data)
            if serializer.is_valid(raise_exception=True):
                email = serializer.data.get('email')
                password = serializer.data.get('password')
                user = authenticate(email=email, password=password)
                if user is not None:
                    return Response(
                        {"Message": "Login Successful !"},
                        status=status.HTTP_200_OK
                    )
                else:
                    return Response(
                        {"Errors": {"non_field_errors": ["Email or Password is not valid !"]}},
                        status=status.HTTP_404_NOT_FOUND
                    )
            return Response(
                serializer.errors,
                status=status.HTTP_400_BAD_REQUEST
            )
-- Then following to app's urls.py :
    >> path('login/', UserLoginView.as_view(), name='login'),
-- Test is in postman, see if login is succesfull :
    >> {
            "email": "indu@example.com",
            "password": "indu@123#"
       }


************************************ Customize Error Response ************************************
 
-- Create a new file called 'renderers.py' in account app.
-- Add following code to it :
    >>  from rest_framework import renderers
        import json

        class UserRenderer(renderers.JSONRenderer):
            charset = 'UTF-8'
            def render(self, data, accepted_media_type=None, renderer_context=None):
                response = ''
                if 'ErrorDetail' in str(data):
                    response = json.dumps({"Errro": data})
                else:
                    response = json.dumps(data)
                return response
-- Then to use it, go to views.py and import this class there.
    >> from .renderers import UserRenderer
-- Then add following code to views :
    >> renderer_classes = [UserRenderer]
-- Then if you try to bring error in postman while hitting the api, you can see errors as follows
   with "errors" key. This will help in frontend. :
    >> {
        "errors": {
            "email": [
                "This field is required."
            ],
            "name": [
                "This field is required."
            ],
            "password": [
                "This field is required."
            ],
            "password2": [
                "This field is required."
            ],
            "tc": [
                "This field is required."
            ]
        }
    }


************************************ Creating tokens manually *************************************

-- Refer folowing doc : https://django-rest-framework-simplejwt.readthedocs.io/en/latest/creating_tokens_manually.html
-- Now let'a go to views.py and import the token lib.
    >>  from rest_framework_simplejwt.tokens import RefreshToken
        def get_tokens_for_user(user):
        refresh = RefreshToken.for_user(user)

        return {
            'refresh': str(refresh),
            'access': str(refresh.access_token),
        }
-- Then in Registration view, after the saving the user, call this above method and pass the saved user.
    >> token = get_tokens_for_user(user)
-- Then send this token in the response.
    >> return Response(
            {"token": token, "Message": "Registration Successful !"},
            status=status.HTTP_201_CREATED
        )
-- Then do the similar thing in login view.
-- Then test in the postman for both regiter and login api. Both refresh and access tokens must be
   generated.

********************************* Get User Profile View *****************************************

-- Create a new view in views.py.
-- Before that, create a serializer in serializers.py file.
    >>  class UserProfileSerializer(serializers.ModelSerializer):
        class Meta:
            model=User
            fields=['id', 'email', 'name']
-- Then use it in the views.py. When we use "permission_classes = [IsAuthenticated]", we are making this
   api a protected route for only authenticated users with token to access.
        >>  from rest_framework.permissions import IsAuthenticated
            class UserProfileView(APIView):
                renderer_classes = [UserRenderer]
                permission_classes = [IsAuthenticated]
                def get(self, request, format=None):
                    serializer = UserProfileSerializer(request.user)
                    return Response(
                        serializer.data,
                        status=status.HTTP_200_OK
                    )
-- Then add url in urls.py :
    >> path('profile/', UserProfileView.as_view(), name='profile'),
-- Now if we try to hit the GET api, we will get following error :
    >> {
            "errors": {
                "detail": "Authentication credentials were not provided."
            }
        }
-- So hit login api and copy the generated access token.
-- Then add the header : Authorization, and in value write Bearer and then give a space and paste 
   the token for profile api.
-- Then if we hit the api, it will return us that logged in user's data.

*********************************** Change Password *********************************************


